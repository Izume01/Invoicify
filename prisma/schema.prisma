generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
  USER
  ADMIN
  SUPER_ADMIN
  GUEST
  OWNER
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  OVERDUE
}

enum InvoiceAccessType {
  VIEW
  EDIT
  DELETE
}

model User {
  id         Int       @id @default(autoincrement())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  clerkId    String    @unique
  name       String?
  email      String?
  imageUrl   String?
  userType   UserType  @default(USER)

  invoices   Invoice[]
  accesses   InvoiceAccess[]
}

model Client {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  name        String
  email       String
  address     String
  city        String
  state       String
  zip         String
  country     String
  phone       String
  website     String
  notes       String?

  invoices    Invoice[]
}

model Invoice {
  id             Int          @id @default(autoincrement())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  userId         Int
  user           User         @relation(fields: [userId], references: [id])

  clientId       Int
  client         Client       @relation(fields: [clientId], references: [id])

  invoiceNumber  String       @unique
  invoiceDate    DateTime
  dueDate        DateTime
  status         InvoiceStatus @default(DRAFT)

  items          InvoiceItem[]
  emailDrafts    EmailDraft[]
  accesses       InvoiceAccess[]
}

model InvoiceItem {
  id          Int     @id @default(autoincrement())
  invoiceId   Int
  invoice     Invoice @relation(fields: [invoiceId], references: [id])

  // Optional additions:
  name        String
  quantity    Int
  unitPrice   Float
  total       Float    // Can be a computed field in your codebase
}

model EmailDraft {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  invoiceId   Int
  invoice     Invoice  @relation(fields: [invoiceId], references: [id])

  subject     String
  body        String
}

model InvoiceAccess {
  id          Int                @id @default(autoincrement())
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  invoiceId   Int
  invoice     Invoice            @relation(fields: [invoiceId], references: [id])

  userId      Int
  user        User               @relation(fields: [userId], references: [id])

  accessType  InvoiceAccessType  @default(VIEW)
}
